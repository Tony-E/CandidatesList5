
package CandidatesList;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 * Class CandidatesListGUI is the the User Interface to the Candidates List Application.
 * 
 * Code to generate the user interface is produced by Netbeans and should not be changed
 * Most of the other functions are to catch and implement user actions, select objects to be 
 * displayed and fill the table with objects.
 * 
 * @author Tony Evans
 */
public class CandidatesList5GUI extends javax.swing.JFrame {

    private static final int         nCol=13;                      // Number of columns in the table
    private final Object[]           rowData = new Object[nCol];   // Empty row in which to build/extract a table row
    private DefaultTableModel        ctm;                          // Table model to perform editing
    private CandidatesFile           cFile;                        // File manager for the candidates list
    private MPCORBFile               mScan;                        // File manager for MPCORB.dat
    private Timer                    pTime;                        // Timer to trigger update of progress bar
    private Scanner                  myScanner;                    // The currently active scanner (swingworker)
    private Boolean                  tableIsLoaded = false;        // Is there anything in the table yet?
    private final Moon               moon = new Moon();            // The Moon
    private final Sun                sun  = new Sun();             // The Sun
    private final Observatories      obs  = new Observatories();   // The Observatories
    private final Earth              earth= new Earth();           // The Earth
    private final DateTime mStrt = new DateTime();                 // Start of missions in filter
    private final DateTime mEnd =  new DateTime();                 // End of missions in filter
  
    // decimal formatters for data in the table 
    private static final DecimalFormat dpd = new DecimalFormat("00.0");
    private static final DecimalFormat dpdd= new DecimalFormat("##0.00");
    private static final DecimalFormat dd  = new DecimalFormat("00");
    private static final DecimalFormat ddd = new DecimalFormat("000");
    private static final DecimalFormat dddd = new DecimalFormat("###0");
    

   /**
    * Constructor initialises the GUI and the Candidates List application.
    **/
    public CandidatesList5GUI() {
        initComponents();
        initCandidatesList();
    }
    
   /******************************************************************************************************
    * Initialise the application.
    */
    private void initCandidatesList() {

       // Set table property to complete an edit when focus is lost. Get the table model
       cTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
       ctm = (DefaultTableModel) cTable.getModel();

       // Create a timer to control dispay of the progress bar 
        pTime = new Timer(500, pListener);
        
       // Set the initial welcome message */
       commentary.append("Welcome to Tony's experimental candidates list.\n");
        
       // Initialise the observatories combo box and add an action listener for it 
       observe.removeAllItems();
       for (int i=0; i<obs.no; i++) {observe.addItem(obs.getName(i));}
       observe.addActionListener(new java.awt.event.ActionListener() {
          @Override
          public void actionPerformed(java.awt.event.ActionEvent evt) {
               doObscode(evt);
            }
        }); 
        
       // point to default observatory and initialise for the default observatory 
       observe.setSelectedIndex(0);
       setObsCode(0,true);
        
       // read user parameters and apply
       CandiParameters cp = new CandiParameters(this);
       cp.getParms(); 
        
       // initialise the arraylist and file manager and load the table with candidates (if any)
       cFile = new CandidatesFile(this);
       cFile.initialise();
       
       // display name of candidates file being shown and fill table
       this.setTitle(cFile.fileName);
       if (!cFile.cList.isEmpty()) {reLoad();}

       // initialise the MPCORB scanner and show filename
       mScan = new MPCORBFile();
       mpcorb.setText(mScan.fileName); 
    }
    
    /**
     * This method is called from within the constructor to initialise the form. WARNING: Do NOT modify this code. 
     * The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        meridianCheck = new javax.swing.JCheckBox();
        missionCheck = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        msh = new javax.swing.JSpinner();
        msm = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        meh = new javax.swing.JSpinner();
        mem = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        mpcorb = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        vFilter = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        altFilter = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        galFilter = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        uncert = new javax.swing.JSpinner();
        twilight = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        magLimit = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        filterButton = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        toggleDay = new javax.swing.JToggleButton();
        jButton12 = new javax.swing.JButton();
        observe = new javax.swing.JComboBox();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        commentary = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        cTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 153, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                doClose(evt);
            }
        });

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+7));
        jLabel1.setForeground(new java.awt.Color(139, 68, 4));
        jLabel1.setText("Tony's Candidates List v5.0");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filter by mission times"));

        meridianCheck.setText("Not within 30m of meridian.");
        meridianCheck.setToolTipText("Select if Slooh's meridian offset limits apply.");
        meridianCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meridianCheckActionPerformed(evt);
            }
        });

        missionCheck.setText("All of mission period.");
        missionCheck.setToolTipText("Select to show only objects above \"Alt\" during all missions.");
        missionCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                missionCheckActionPerformed(evt);
            }
        });

        jLabel3.setText("Missions from:");
        jLabel3.setToolTipText("Enter time of start of first mission.");

        msh.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        msh.setToolTipText("Enter time of start of first mission.");

        msm.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jLabel9.setText("To:");
        jLabel9.setToolTipText("Enter time of end of last mission.");

        meh.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        meh.setToolTipText("Enter time of end of last mission.");

        mem.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 296, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(60, 60, 60))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(missionCheck)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(msm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(meh, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mem, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                    .addComponent(meridianCheck))
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {meh, mem, msh, msm});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(msm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(meh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(msh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meridianCheck)
                    .addComponent(missionCheck))
                .addContainerGap())
        );

        mpcorb.setText("jTextField1");
        mpcorb.setToolTipText("Use the Browse button select your local installation of the MPCORB.DAT file.");
        mpcorb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpcorbActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Filter"));

        vFilter.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(19.5f), Float.valueOf(12.0f), Float.valueOf(24.0f), Float.valueOf(0.1f)));
        vFilter.setToolTipText("Filter candidates with V magnitude down to this value.");

        jLabel6.setText("Maximum magnitude dispaly:");

        altFilter.setModel(new javax.swing.SpinnerNumberModel(0, 0, 90, 1));
        altFilter.setToolTipText("Filter candidates with meridian altitude greater than this value (degrees).");

        jLabel7.setText("Minimum rise/set altitude:");

        galFilter.setToolTipText("Filter candidates with Galactic Latitude greater that this (degrees N or S).");

        jLabel8.setText("Minimum Galactic latitue (+/-)");

        uncert.setModel(new javax.swing.SpinnerNumberModel(1, 0, 9, 1));
        uncert.setToolTipText("Hide asteroids with an uncertainty (U) less than this value.");

        twilight.setMaximumRowCount(3);
        twilight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Astronomical 18°", "Nautical 12°", "Civil 6°" }));
        twilight.setToolTipText("Select which level of twilight required.");
        twilight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twilightActionPerformed(evt);
            }
        });

        jLabel10.setText("Twilight:");

        magLimit.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(20.0f), Float.valueOf(15.0f), Float.valueOf(22.0f), Float.valueOf(0.5f)));
        magLimit.setToolTipText("Maximum magnitude of candidates to be downloaded.");

        jLabel2.setText("Maximum magnitude download:");

        jLabel4.setText("Show asteroids with uncetrainty >=");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(uncert, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(altFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(magLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(galFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(twilight, 0, 1, Short.MAX_VALUE)
                        .addGap(175, 175, 175))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {altFilter, galFilter, magLimit, uncert, vFilter});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(twilight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(magLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(galFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uncert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {altFilter, galFilter, magLimit, uncert, vFilter});

        jButton2.setText("MPCORB");
        jButton2.setToolTipText("Browse to your local MPCORB.DAT.");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doBrowse(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Options"));

        filterButton.setText("Filter");
        filterButton.setToolTipText("(Re)-apply filter settings.");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doFilter(evt);
            }
        });

        jButton15.setText("Ephemers");
        jButton15.setToolTipText("Open MPC Ephemeris page for SELected objects.");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doDetail(evt);
            }
        });

        jButton5.setText("Where?");
        jButton5.setToolTipText("List the observatories and times the SELected object(s) can be seen.");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doWhere(evt);
            }
        });

        jButton10.setText("Clear Sel.");
        jButton10.setToolTipText("Clear all selections.");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doClearSelection(evt);
            }
        });

        jButton3.setText("NEOCPs");
        jButton3.setToolTipText("Show ephemeris for selected NEOCPs");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEOCPage(evt);
            }
        });

        toggleDay.setText("+24hrs");
        toggleDay.setToolTipText("Toggle between tonight and tomorrow night.");
        toggleDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doToggleDay(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton12.setForeground(new java.awt.Color(204, 0, 0));
        jButton12.setText("Refresh");
        jButton12.setToolTipText("Automatically refreshes all data sources and applies default filter.");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doAuto(evt);
            }
        });

        observe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "G40 - Slooh Teide ", "G68 - Sierra Stars", "XXX - xxxx xxxxx", "Q62 - iTele SSO", "H06 - iTele Mayhill", "I89 - iTele Nerpio" }));
        observe.setToolTipText("Select Observatory");
        observe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                observeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(observe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleDay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton10, jButton15, jButton3, jButton5, toggleDay});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(observe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleDay, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterButton)
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton12, observe});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {filterButton, jButton10, jButton15, jButton3, jButton5, toggleDay});

        progressBar.setToolTipText("Shows progress of downloads.");

        commentary.setColumns(20);
        commentary.setLineWrap(true);
        commentary.setRows(5);
        commentary.setToolTipText("Comment on progress and filtering.");
        commentary.setMargin(new java.awt.Insets(2, 10, 2, 2));
        jScrollPane2.setViewportView(commentary);

        cTable.setAutoCreateRowSorter(true);
        cTable.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        cTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Object", " ", " U", " Pri", "Orbit/Type", "   H", "   V", "  Alt", " Time", " GLat", "  \"/m", "  ^M", "Last Ob."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cTable.setDragEnabled(true);
        cTable.setFillsViewportHeight(true);
        cTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(cTable);
        if (cTable.getColumnModel().getColumnCount() > 0) {
            cTable.getColumnModel().getColumn(0).setPreferredWidth(69);
            cTable.getColumnModel().getColumn(0).setMaxWidth(70);
            cTable.getColumnModel().getColumn(1).setResizable(false);
            cTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            cTable.getColumnModel().getColumn(2).setResizable(false);
            cTable.getColumnModel().getColumn(2).setPreferredWidth(10);
            cTable.getColumnModel().getColumn(3).setResizable(false);
            cTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            cTable.getColumnModel().getColumn(4).setPreferredWidth(220);
            cTable.getColumnModel().getColumn(5).setResizable(false);
            cTable.getColumnModel().getColumn(5).setPreferredWidth(25);
            cTable.getColumnModel().getColumn(6).setResizable(false);
            cTable.getColumnModel().getColumn(6).setPreferredWidth(30);
            cTable.getColumnModel().getColumn(7).setResizable(false);
            cTable.getColumnModel().getColumn(7).setPreferredWidth(25);
            cTable.getColumnModel().getColumn(8).setResizable(false);
            cTable.getColumnModel().getColumn(8).setPreferredWidth(100);
            cTable.getColumnModel().getColumn(9).setResizable(false);
            cTable.getColumnModel().getColumn(9).setPreferredWidth(24);
            cTable.getColumnModel().getColumn(10).setResizable(false);
            cTable.getColumnModel().getColumn(10).setPreferredWidth(35);
            cTable.getColumnModel().getColumn(11).setResizable(false);
            cTable.getColumnModel().getColumn(11).setPreferredWidth(26);
            cTable.getColumnModel().getColumn(12).setResizable(false);
            cTable.getColumnModel().getColumn(12).setPreferredWidth(60);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mpcorb, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mpcorb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        jMenuItem2.setText("New");
        jMenuItem2.setToolTipText("Clear the table.");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNew(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.setToolTipText("Open an existing candidates file.");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doOpen(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.setToolTipText("Save the current file.");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSave(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setToolTipText("Save the current table as a file.");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSaveAs(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit. Note nothing will automatically saved.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText("Actions");

        jMenuItem1.setText("get NEOCPs");
        jMenuItem1.setToolTipText("Download and scan NEOCP/PCCP.");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNEOCP(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setText("get Unusuals");
        jMenuItem4.setToolTipText("Download and scan Dates of Last Observation - Unusuals.");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doUnusual(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem6.setText("get Priority");
        jMenuItem6.setToolTipText("Download and scan the Spaceguard Priority List.");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSpaceGuard(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem8.setText("get Distant");
        jMenuItem8.setToolTipText("Download and scan Dates of Last Observations - Distant Objects.");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doDistant(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem9.setText("scan MPCORB");
        jMenuItem9.setToolTipText("Download NEAp01.txt. Scan it, and local MPCORB.DAT, to obtain elements and status flags.");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doMPCOrb(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem14.setText("get Sormano ");
        jMenuItem14.setToolTipText("Download and scan the Sormano Observatoory Priority List and Encounters List.");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSornama(evt);
            }
        });
        jMenu1.add(jMenuItem14);

        menuBar.add(jMenu1);

        jMenu3.setText("Help");

        jMenuItem15.setText("Online Help");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doHelp(evt);
            }
        });
        jMenu3.add(jMenuItem15);

        menuBar.add(jMenu3);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    /**
     * Exit - Ask to save before exiting. Run garbage collector.
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        cFile.askToSave();
        System.gc();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    /**
     * Menu File/Open, Save and Save As handlers.
     */
    private void doOpen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doOpen
        cFile.open();
        reLoad();
    }//GEN-LAST:event_doOpen
    private void doSave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSave
        doUnload();
        cFile.save();
    }//GEN-LAST:event_doSave
    private void doSaveAs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSaveAs
        doUnload();
        cFile.saveAs();
        mpcorb.setText(mScan.fileName);
    }//GEN-LAST:event_doSaveAs
    /**
     * Browse for the location of MPCORB.
     */
    private void doBrowse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doBrowse
        mScan.browse();
        mpcorb.setText(mScan.fileName);
    }//GEN-LAST:event_doBrowse
    /**
     * Menu File/New clear the data and reset ready for new Refresh.
     **/
    private void doNew(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNew
        cFile.clear();
        reLoad();
    }//GEN-LAST:event_doNew
    /**
     * Scan MPCORB and update candidates with orbit-type data.
     */
    private void doMPCOrb(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doMPCOrb
        doScan(Scanner.MPCORB);
        reLoad();
    }//GEN-LAST:event_doMPCOrb
    /**
     * Filter button pressed. Causes a reload of the table with the current filter settings.
     */
    private void doFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doFilter
        reLoad();
    }//GEN-LAST:event_doFilter
    /*********************************************************************************************
     * Menu selections for the various sources of data.
     */
    private void doUnusual(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doUnusual
        doScan(Scanner.Unusual);
    }//GEN-LAST:event_doUnusual
    private void doNEOCP(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNEOCP
        doScan(Scanner.NEOCP);
        doScan(Scanner.PCCP);
    }//GEN-LAST:event_doNEOCP
    private void doSpaceGuard(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSpaceGuard
        doScan(Scanner.Priority);
        //doScan(Scanner.ESASpaceguard); // use this if Spaceguard is not working
    }//GEN-LAST:event_doSpaceGuard
   /**
    * Clear all the SEL selections.
    **/
    private void doClearSelection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doClearSelection
        // Clear SELs from the displayed table 
        if (tableIsLoaded) {
            for (int i=0; i<ctm.getRowCount(); i++) {
               cTable.setValueAt(false, i, 1);
            }
        }
        // clear all the SELs in the file 
        Iterator<Candidate> it = cFile.cList.iterator();
        while (it.hasNext()) {
            Candidate c = it.next(); 
            c.select=false;
        }
        // Refill the table
        reLoad();
    }//GEN-LAST:event_doClearSelection

    /**
     * Action when Refresh is pressed. Set default filters and run all the scanners. Note that completion of
     * the scanner is picked up by the timer event pListener which then goes on the to run the MPC queries.
     */
    private void doAuto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doAuto
         commentary.append("\n---- Refresh started. ----\n");
         cFile.clear();                               // empty the table and file
         reLoad();                                    // show the empty table
         doScan(Scanner.Auto);                        // run the auto scanner
    }//GEN-LAST:event_doAuto
  
  
    /**
     * Scan the Distant Minor Objects list.
     */
    private void doDistant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doDistant
         doScan(Scanner.Distant);
    }//GEN-LAST:event_doDistant
   
   /**
    * Get the ephemeris page for the selected objects
    * @param evt 
    */
    private void doDetail(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doDetail
        setMissionTimes();
        try {
            MPCQueryDetail mqd = new MPCQueryDetail(cTable);
            mqd.doQuery(mStrt, mEnd, obs.code);
        } catch (IOException ex) {
            Logger.getLogger(CandidatesList5GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_doDetail
   
    /**
     * List opportunities to observe the selected objects at different observatories.
     **/
    private void doWhere(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doWhere
       // make sure the list has all the latest table updates
        doUnload();
        
       // for each of the defined obs codes... 
        int maxo = observe.getItemCount();
        for (int o = 0; o<maxo; o++) {
            
           // set up the start and end times of possible missions
            obs.setObservatory(o);
            int horzn = -18 + 2*twilight.getSelectedIndex();
            obs.setTime(sun, toggleDay.isSelected(), horzn); 
            
           // scan the selected candidates to see which have rise/set times in the possible mission period
            Iterator<Candidate> it = cFile.cList.iterator();
            while (it.hasNext()) {
                Candidate c = it.next();
                if (c.select) {
                    c.setTimes((int) altFilter.getValue(), obs, sun, moon, earth);
                    String showStuff = c.toString() + "               ";
                    showStuff = showStuff.substring(0,15) + " ";
                    showStuff+=obs.code + " "+obs.name +" ";
                    if (c.ctRise.julian<obs.tSet.julian) {showStuff+=obs.tSet.getTime(DateTime.HHMM);} else {showStuff+=c.ctRise.getTime(DateTime.HHMM);} 
                    showStuff+=" - ";
                    if (c.ctSet.julian>obs.tRise.julian) {showStuff+=obs.tRise.getTime(DateTime.HHMM);} else {showStuff+=c.ctSet.getTime(DateTime.HHMM);} 
                    commentary.append(showStuff + "\n") ; 
                }
            }
        }
       // reload the lable with the selected obscode 
        setObsCode(observe.getSelectedIndex(), true);
        if (tableIsLoaded) {reLoad();}
    }//GEN-LAST:event_doWhere
   
  
    /**
     * Pressing the +/-24hr button causes all dates to advance/retard by 24 hours. The observatory is re-set
     * but default mag & alt are not.
     */
    private void doToggleDay(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doToggleDay
       if (toggleDay.isSelected()) {toggleDay.setText("-24Hrs");} else {toggleDay.setText("+24Hrs");}
       setObsCode(observe.getSelectedIndex(), false);
       if (tableIsLoaded) {reLoad();}
    }//GEN-LAST:event_doToggleDay
    
    /**
     * Show the NEOCP Ephemeris page. 
     */
    private void NEOCPage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEOCPage
        setMissionTimes();
        try {
            MPCQueryDetail mqd = new MPCQueryDetail(cTable);
            NEOCPQuery nq = new NEOCPQuery(cTable);
            nq.doQuery(mStrt, mStrt, obs.code);
        } catch (IOException ex) {
            Logger.getLogger(CandidatesList5GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_NEOCPage
    
   /**
     * Scan the Sormano list for candidates. 
     */
    private void doSornama(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSornama
        doScan(Scanner.Sormano);
    }//GEN-LAST:event_doSornama
    /**
     * Open a browser and show the help page.  
     */
    private void doHelp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doHelp
        URI uri = null;
        try {
            uri = new URI("http://www.myastrostuff.com/SRG/candidateshlp1.htm");
        } catch (URISyntaxException ex) {
            Logger.getLogger(CandidatesList5GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Desktop.getDesktop().browse(uri);
        } catch (IOException ex) {
            Logger.getLogger(CandidatesList5GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_doHelp

    private void missionCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_missionCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_missionCheckActionPerformed

    private void observeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_observeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_observeActionPerformed

    private void twilightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twilightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_twilightActionPerformed

    private void doClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_doClose
        CandiParameters cp = new CandiParameters(this);
        cp.putParms();
    }//GEN-LAST:event_doClose

    private void mpcorbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpcorbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpcorbActionPerformed

    private void meridianCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meridianCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_meridianCheckActionPerformed
   /**
    * Scan the designated sources for candidates using a Scanner (SwingWorker). The timer is started
    * to trigger display of the progress bar occasionally. Note this thread returns to the GUI while
    * the scanner executes in another thread. 
    **/
    private void doScan(int source) {
        myScanner = new Scanner(commentary);
        myScanner.setSource(source);
        myScanner.setFile(cFile);
        myScanner.setLimit((float) magLimit.getValue());
        myScanner.setMPC(mScan.fileName);
        pTime.start();
        myScanner.execute();
    }
   
    /**
     * If the selected observatory is changed reset the observatory-dependent data and reload the table.
     **/
    private void doObscode(java.awt.event.ActionEvent evt) {
        setObsCode(observe.getSelectedIndex(), true);
        if (tableIsLoaded) {reLoad();}
    }
   
    /**
     * Main is the system entry point and creates an instance of this class.Main was generated by Netbeans.
     * @param args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                String laf = info.getName();
                if ("Metal".equals(laf)) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CandidatesList5GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CandidatesList5GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CandidatesList5GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CandidatesList5GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CandidatesList5GUI().setVisible(true);
            }
        });
    }
   
    /*****************************************************************************************************
     * re-load the table contents from the candidates. Before loading the table, make sure
     * all the times and positions are correct and apply the filter.
     */
    private void reLoad() {
        
        // if the list is empty clear the table and quit
        if (cFile.cList.isEmpty()) {
            ctm.setRowCount(0);
            tableIsLoaded = false;
            commentary.append("List cleared. \n");
            return;
        }
            
        // ensure all the SEL fields are updated in the candidates  
        doUnload();
        
        // clear the table, set table format and sequence 
        ctm.setRowCount(0);
        tableIsLoaded = false;
        cTable.setShowHorizontalLines(true);
        doSortUncert();                                    
        
        // Set the correct tRise, tMidnight and tSet times at the observatory acording to selected twilight
        int horzn = -18 + 2*twilight.getSelectedIndex();
        obs.setTime(sun, toggleDay.isSelected(), horzn); 
        
        // Set up the mission time check filters
        setMissionTimes();
        
        // reload the table from the candidates list 
        Iterator<Candidate> it = cFile.cList.iterator();
        while (it.hasNext()) {
            
            // clear the data for a new table row
            for (int i = 0; i < nCol; i++) {rowData[i] = null;}
          
            // get next candidate and make sure its time and position are correctly set
            Candidate c = it.next();
            c.setTimes((int) altFilter.getValue(), obs, sun, moon, earth);  
          
            // show candidates if within filtered limits 
            if (filtered(c)) {
                
                // construct orbit-type field  
                String orbit;
                if (c.NEOCP) {orbit=c.orbitName;} else {orbit=c.ops + "," + c.orbitName;}
                if (c.PHA) {orbit+=",PHA";}
                if (c.kmplus) {orbit+=",1km+";}
                if (c.VI) {orbit+=",VI";}
                if (!c.SAO.equals("xx")) {orbit+=","+c.SAO;}
                if ((c.closeDate != null)) {
                    if (c.closeDist < 10.0) {
                       orbit += ",»"+c.closeDist + "LD" + " on "+c.closeDate;
                    }
                }
                
                // load row fields
                rowData[0] = c;
                rowData[1] = c.select;
                rowData[2] = c.uncertainty;
                if (c.NEOCP) {rowData[3] = c.NEOCPScore;} else {rowData[3] = c.spgPri; } 
                rowData[4] = orbit;
                rowData[5] = dpd.format(c.Hmag);
                rowData[6] = (dpd.format(c.Vmag))+c.dVmag;
                rowData[7] = dd.format(c.bestAlt);    
                rowData[8] = getTimeText(c);
                rowData[9] = dd.format(c.position.galLat());
                if (!c.NEOCP) {rowData[10] = dpdd.format(c.motion);}
                rowData[11] = ddd.format(c.moonAngle);
                if (!c.NEOCP) {rowData[12] = c.lastObs.getGdate();} else {rowData[12]=c.NEOCPdate;}
                
                           
                // add the row to the table 
                ctm.addRow(rowData);
            }
        }
       
        // make commentary about table contents etc. 
        int count = ctm.getRowCount();
        commentary.append("------------\n");
        commentary.append(obs.name + "\n");
        commentary.append(count + " records shown. Moon is "+dd.format(moon.getPhase(obs.tSet))+"% \n");
        commentary.append("Sunset-rise "+obs.tSet.getGdate()+" "+obs.tSet.getTime(DateTime.HHMM)+" - "
                +obs.tRise.getGdate()+" "+obs.tRise.getTime(DateTime.HHMM)+"\n");
        commentary.append("Missions "+mStrt.getTime(DateTime.HHMM)+" - "+mEnd.getTime(DateTime.HHMM)+"\n");
        if (count>0) {tableIsLoaded = true;}
    }
    
    /**
     * Return true/false depending whether the candidate passes the filter. 
     */
    private Boolean filtered(Candidate c) {
         // filer out objects too faint
         if (c.Vmag>(float) vFilter.getValue()) {return false;}
         // filter out asteroids if not required or too low uncertainty or priority
         if ((!c.comet) && (!c.NEOCP) && (!c.uncertainty.equals("*"))) {
             if (c.uncertainty.equals("E")) {return true;}
             if (0< String.valueOf(uncert.getValue()).compareTo(c.uncertainty) )   {return false;}
             if (c.NEOCPScore.equals("None")) {return false;}
         }
         // filter out objects that never reach altitude limit
         if (c.bestAlt< (int) altFilter.getValue()) {return false;}
         // filter out objects too close to galactic plane 
         int gl = Math.abs((int) galFilter.getValue());
         int cl = (int) Math.abs(c.position.galLat());
         if (cl<gl) {return false;}
        
         // filter out objects that cross the meridian during the mission period plus/minus 35mins */
         if (meridianCheck.isSelected()) {
            if (c.ctMeridian.julian>(mStrt.julian-0.0243) && c.ctMeridian.julian<(mEnd.julian+0.0243)) {return false;}
         }
         // filter out objects not above altitude during mission period
         if (missionCheck.isSelected()) {
              if (c.ctRise.julian>mStrt.julian || c.ctSet.julian<mEnd.julian) {return false;}
         }
         // Accept remaining objects if their ctRise/set times are within the sunset/sunrise period
         return c.ctSet.julian>obs.tSet.julian && c.ctRise.julian<obs.tRise.julian;
    }
   
    /**
     * Set up the mission time check filters.
     */
    private void setMissionTimes() {
         // mission start is sunset or mission time  
         mStrt.setDate(obs.tSet.julian);
         int starthr = (int) msh.getValue();
         int startmn = (int) msm.getValue();
         if (starthr>0 || startmn>0) { mStrt.setTime(starthr,startmn,0);}
         while (mStrt.julian<obs.tSet.julian) {mStrt.add(1.0);}
         // mission end not before mission start  
         mEnd.setDate(mStrt.julian);
         int endhr = (int) meh.getValue();
         int endmn = (int) mem.getValue();
         if (endhr>0 || endmn>0) {
             mEnd.setTime(endhr,endmn, 0);} 
         else          {
             mEnd.setDate(obs.tRise.julian);
         }
         while (mEnd.julian<mStrt.julian) {mEnd.add(1.0);}
         // signal error if missions not within window tSet to tRise           
         if (mStrt.julian>obs.tRise.julian || mEnd.julian>obs.tRise.julian) {
               commentary.append("Invalid mission times. \n");
         }
    }
   
    /**
     * Construct the time text to go in the table. Use the ctRise and ctSet times but limited
     * by sunset and sunrise.
     */
    private String getTimeText(Candidate c) {
        if (c.uncertainty.equals("E")) {return "-------------?---------";}
        String txt = "";
        if (c.ctRise.julian<obs.tSet.julian) {txt+=">-----";} else {txt=c.ctRise.getTime(DateTime.HHMM);} 
        txt+="/ ";
        txt+=c.ctMeridian.getTime(DateTime.HHMM)+" /";
        if (c.ctSet.julian>obs.tRise.julian) {txt+="---->";} else {txt+=c.ctSet.getTime(DateTime.HHMM);} 
        return txt;
    }
   
    /**
     * Save the selection (tick) options into the candidate object.
     */
    private void doUnload() {
        if (tableIsLoaded) {
            for (int i=0; i<ctm.getRowCount(); i++) {
                Candidate c = (Candidate) cTable.getValueAt(i, 0);
                c.select = (Boolean) cTable.getValueAt(i, 1);
            }
        }
    }
    /**
     * Set the active observatory and re-establish observatory-dependent times.
     */
    private void setObsCode(int ob, boolean resetDefaults) {
        
        // Set observatory and its sunrise and sunset times.
        obs.setObservatory(ob);
        int horzn = -18 + 2*twilight.getSelectedIndex();
        obs.setTime(sun, toggleDay.isSelected(), horzn); 
        
        // Set default mStrt and mEnd mission times to default sunset time
        mStrt.setDate(obs.tSet.julian);
        mEnd.setDate(obs.tSet.julian);
        
        // Set default magnitude and altitude filters for this observatory if requested */
        if (resetDefaults) {
            vFilter.setValue(obs.obsMag);
            altFilter.setValue(obs.obsAlt);
        }
    }
   
    /**
     * ActionListener to update the progress bar when the timer is running. When we get to 999 percent that
     * signals SwingWorker has finished so cancel the timer, zero the progress bar and reload the table.
     */
    ActionListener pListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            
            if (myScanner.progress==999) {
                pTime.stop();
                progressBar.setValue(0);
                doSortUncert();
                reLoad();
            } else {
                progressBar.setValue(myScanner.progress);
            }
        }
    };
    
    /**
     * Sort the candidates list by uncertainty sequence.
     */
    private void doSortUncert() {
        Collections.sort(cFile.cList, new Comparator<Candidate>(){
            @Override
            public int compare(Candidate c1, Candidate c2){
                return c2.uncertainty.compareTo(c1.uncertainty);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JSpinner altFilter;
    private javax.swing.JTable cTable;
    public javax.swing.JTextArea commentary;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton filterButton;
    protected javax.swing.JSpinner galFilter;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    protected javax.swing.JSpinner magLimit;
    private javax.swing.JSpinner meh;
    private javax.swing.JSpinner mem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBox meridianCheck;
    private javax.swing.JCheckBox missionCheck;
    private javax.swing.JTextField mpcorb;
    private javax.swing.JSpinner msh;
    private javax.swing.JSpinner msm;
    protected javax.swing.JComboBox observe;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JToggleButton toggleDay;
    protected javax.swing.JComboBox twilight;
    protected javax.swing.JSpinner uncert;
    protected javax.swing.JSpinner vFilter;
    // End of variables declaration//GEN-END:variables
}
